#!/usr/bin/env node

/** 
 * Script takes inspiration from:
 * https://github.com/visionmedia/express/blob/master/bin/express
 * https://github.com/tnantoka/LooseLeaf/blob/master/bin/looseleaf
 * https://github.com/baudehlo/Haraka/blob/master/bin/haraka
 *
 * Uses portions of Matt Sergeant's bin/haraka
 */

"use strict";

var util = require('util'),
	fs = require('fs'),
	path = require('path'),
	os = require('os'),
	sv = require('semver'),
	program = require('commander'),
	product = require('../lib/product'),
	jsonTidy = require('../lib/json-tidy'),
	clientmanager = require('../lib/clientmanager');

// Additonal Useful funcs
program.writeUsageAndExit = function(code)
{
	var exitcode = code || 1;
	process.stdout.write(program.helpInformation());
	process.exit(exitcode);
}

program.invalidOptionValue = function(name, additional)
{
	console.error();
	console.error("  error: invalid option value for `%s'", name);
	if (additional)
		console.error("         %s", additional);
	console.error();
	process.exit(1);
}

function mkdir(dst, force)
{
	try
	{
		fs.mkdirSync(dst, fs.statSync(__dirname).mode);
	}
	catch (e)
	{
		// File exists
		if (e.errno = 17)
		{
			if (!force)
			{
				console.warn();
				console.warn("  warn: exception whilst creating '%s' - '%s'", dst, e.message);
				console.warn();
			}
		}
		else
		{
			throw e;
		}
	}
}

var mkfile = function (dst, data, force)
{
	try
	{
		if (path.existsSync(dst) && !force)
			throw filePath + " already exists";

		var fd = fs.openSync(dst, 'w');
		fs.writeSync(fd, data);
		fs.close(fd);
	}
	catch (e)
	{
		console.error();
		console.error("  error: unable to create file '%s'", file);
		console.error();
	}
}

var copyfile = function (src, dst, force)
{
	if (path.existsSync(dst) && !force)
	{
		console.error();
		console.error("  error: failed to copy '%s' to '%s' - already exists", src, dst);
		console.error();
		return;
	}

	var data = fs.readFileSync(src);
	fs.writeFileSync(dst, data);
}

var copydir = function(src, dst, force)
{
	mkdir(dst, force);
	var files = fs.readdirSync(src);
	
	for(var i = 0; i < files.length; i++)
	{
		// Ignore dot files
		// TODO: Add windows hidden file support
		if (/^\./.test(files[i]))
			continue;
	
		var srcFile = path.join(src, files[i]);
		var dstFile = path.join(dst, files[i]);

		var srcStat = fs.statSync(srcFile);
	  
		// Recursive call If direcotory
		if (srcStat.isDirectory())
			copydir(srcFile, dstFile, force);

		// Copy to dstPath if file
		else if (srcStat.isFile())
			copyfile(srcFile, dstFile, force);
	}
}

var eol = (os.platform() == 'win32') ? '\r\n' : '\n';

var basePKG = JSON.stringify({
	"name": product.name + "-" + product.version + "-custom", 
	"description": "A custom " + product.name + " install",	
	"version": "0.1"
});

var baseREADME = [
	"eXtensible Insim 4 Node(js)",
	"---------------------------",
	"Congratulations on creating a new set of default xi4n config files and plugins.",
	"",
	"This directory contains a few key files and directories.",
	"",
	" - config.json",
	"   This config for your client. You probably want to alter a few things in here",
	"   such as the hostname, passwords, plugins, etc.",
	" - plugins",
	"   This directory contains both base and custom plugins which you write to run",
	"   in xi4n.",
	"",
].join(eol);

// Our program
program
	.version(product.version)
	.option('-i, --install <path>', 'Install basic config and standard plugins to <path>')
	.option('-c, --config <path>', 'Run xi4n install, using configuration at <path>')
	.option('-f, --force', 'Forces either install or config to run, if path already exists')
	.parse(process.argv);

if (program.install && program.config)
{
	console.error();
	console.error('  error: no support to run both install and config simultaneously.');
	console.error('		 surely you want to customise your config first?');
	console.error();
	process.exit(1);
}

if (program.install)
{
	path.exists(program.install, function(exists)
	{
		if (exists && !program.force)
			program.invalidOptionValue('-i, --install <path>', 'Path already exists');

		if (program.force)
		{
			console.warn();
			console.warn("  warn: forcing overwrite of existing files and directories");
			console.warn();
		}

		if (!exists)
			mkdir(program.install);

		// copy our crap into the relevant places
		console.log('  installing into \'%s\'', program.install);

		// package.json file for our install directory
		console.log('  creating \'%s\'', path.join(program.install, 'package.json'));
		mkfile(
			path.join(program.install, 'package.json'), 
			basePKG,
			program.force
		);

		// README file
		console.log('  creating \'%s\'', path.join(program.install, 'README'));
		mkfile(
			path.join(program.install, 'README'), 
			baseREADME,
			program.force
		);

		// copy base config.json
		console.log('  creating \'%s\'', path.join(program.install, 'config.json'));
		copyfile(
			path.join(product.basedir, 'config.json'), 
			path.join(program.install, 'config.json'),
			program.force
		);

		// copy base plugins
		console.log('  creating \'%s\'', path.join(program.install, 'plugins'));
		copydir(
			path.join(product.basedir, 'plugins'), 
			path.join(program.install, 'plugins'),
			program.force
		);
	});
}

if (program.config)
{
	// resolve, so we can do things like "xi4n -c ."
	program.config = path.resolve(program.config);

	if (!path.existsSync(program.config))
		program.invalidOptionValue('-c, --config <path>', 'path does not exist');

	var configFile = path.join(program.config, 'config.json');
	if (!path.existsSync(program.config))
		program.invalidOptionValue('-c, --config <path>', 'path exists, but cannot find config.json');

	console.log();
	console.log('  running with given path \'%s\'', program.config);
	console.log();

	// parse our config file
	// it's user-editable, so we cannot be 100% sure that it's valid JSON,
	// so lets do some basic tidying on it first, removing some common mistakes
	var opts = jsonTidy.tidyParseFile(configFile, 'utf8');

	// check out config file supports this version of xi4n
	if ((!opts.xi4n) || (!sv.satisfies(product.version, opts.xi4n)))
	{
		console.error();
		console.error('  mis-matched versions, config expects \'%s\', xi4n is \'%s\'', opts.xi4n, product.version);
		console.error();
		process.exit();
	}

	// setup clientmanager
	var c = new clientmanager.create(opts, program.config);
	c.on('drain', function()
	{
		console.log();
		console.log('  lost all InSim connections');
		console.log('  quitting');
		console.log();
		process.exit();
	});

	// connect
	c.connect();

	if (process.platform != 'win32')
	{
		// quit on SIGINT gracefully
		// can't do this on Windows yet because of 
		// https://github.com/joyent/node/issues/1553
		process.on('SIGINT', function()
		{
			console.log();
			console.log('  got SIGINT, disconnecting gracefully');
			console.log();
			c.disconnect();
		});
	}
}

if (!program.install && !program.config)
	program.writeUsageAndExit(1);
